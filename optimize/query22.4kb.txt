*[_type == "page" && (slug.current == "om-os" || slug_da.current == "om-os" || slug_en.current == "om-os")][0]{
   content[]{
_type == "hero" => {
 
  'logo':{ 'image':logo.image{
alt,
crop,
hotspot,
'url':asset->url,
"id": asset->assetId,
"type": asset->mimeType,
"aspectRatio": asset->metadata.dimensions.aspectRatio,
"lqip": asset->metadata.lqip,
'width': asset->metadata.dimensions.width,
'height': asset->metadata.dimensions.height
 },'text':coalesce(logo.text_da, logo.text) },
  _type,
  _key, 
  'text': coalesce(text_da[]{..., 
markDefs[]{
  ...,
  _type == "image" => {
    
alt,
crop,
hotspot,
'url':asset->url,
"id": asset->assetId,
"type": asset->mimeType,
"aspectRatio": asset->metadata.dimensions.aspectRatio,
"lqip": asset->metadata.lqip,
'width': asset->metadata.dimensions.width,
'height': asset->metadata.dimensions.height

  }
} }, text[]{..., 
markDefs[]{
  ...,
  _type == "image" => {
    
alt,
crop,
hotspot,
'url':asset->url,
"id": asset->assetId,
"type": asset->mimeType,
"aspectRatio": asset->metadata.dimensions.aspectRatio,
"lqip": asset->metadata.lqip,
'width': asset->metadata.dimensions.width,
'height': asset->metadata.dimensions.height

  }
}}),
}
,
_type == "section" => {
  _key,
  _type,
  title,
  bgColor,
  type,
  topSpace,
  bottomSpace,
  imagePosition,
  'content':coalesce(
      content_da[]{
  ...,
  
markDefs[]{
  ...,
  
_type == "link" => {
  'link': link{
   'href': select( defined(externalLink) => externalLink,
                  defined(internalLink) && defined(internalLink->pageType)  => '/'+ coalesce(internalLink->pageType->slug_.current,internalLink->pageType->slug.current) + '/' + coalesce(internalLink->slug_.current ,internalLink->slug.current),
                  defined(internalLink) => '/'+  coalesce(internalLink->slug_.current ,internalLink->slug.current)
                ),
  'external': select(defined(externalLink)=>true,defined(internalLink)=>false)
},
    asButton,
  },
}
,
  
_type == "spacer" => {
    _type,
    space
}
,
  
_type == "imageGalleryPlug" => {
  ...,
  _type,
  _key,
  'items':items[]{..., 'image': image{
alt,
crop,
hotspot,
'url':asset->url,
"id": asset->assetId,
"type": asset->mimeType,
"aspectRatio": asset->metadata.dimensions.aspectRatio,
"lqip": asset->metadata.lqip,
'width': asset->metadata.dimensions.width,
'height': asset->metadata.dimensions.height
} ,'link':link{
    
   'href': select( defined(externalLink) => externalLink,
                  defined(internalLink) && defined(internalLink->pageType)  => '/'+ coalesce(internalLink->pageType->slug_.current,internalLink->pageType->slug.current) + '/' + coalesce(internalLink->slug_.current ,internalLink->slug.current),
                  defined(internalLink) => '/'+  coalesce(internalLink->slug_.current ,internalLink->slug.current)
                ),
  'external': select(defined(externalLink)=>true,defined(internalLink)=>false)

  }  },
  rows,
  rows_mobile,
  ratio,
}
,
  
_type == "imagePlug" => {
  ...,
  'image': image{
alt,
crop,
hotspot,
'url':asset->url,
"id": asset->assetId,
"type": asset->mimeType,
"aspectRatio": asset->metadata.dimensions.aspectRatio,
"lqip": asset->metadata.lqip,
'width': asset->metadata.dimensions.width,
'height': asset->metadata.dimensions.height
},
}
,
  
  _type == "eventPlug" => {
   'items': *[_type == 'event' && references(^.includeTags[]._ref) ] | order(eventItems[0].startDate asc)[] {
  _type,
  _id,
  'tags': tags._ref,
  'content':coalesce(content_da[]{
  ...,
  
markDefs[]{
  ...,
  
_type == "link" => {
  'link': link{
   'href': select( defined(externalLink) => externalLink,
                  defined(internalLink) && defined(internalLink->pageType)  => '/'+ coalesce(internalLink->pageType->slug_.current,internalLink->pageType->slug.current) + '/' + coalesce(internalLink->slug_.current ,internalLink->slug.current),
                  defined(internalLink) => '/'+  coalesce(internalLink->slug_.current ,internalLink->slug.current)
                ),
  'external': select(defined(externalLink)=>true,defined(internalLink)=>false)
},
    asButton,
  },
}
,
},content[]{
  ...,
  
markDefs[]{
  ...,
  
_type == "link" => {
  'link': link{
   'href': select( defined(externalLink) => externalLink,
                  defined(internalLink) && defined(internalLink->pageType)  => '/'+ coalesce(internalLink->pageType->slug_.current,internalLink->pageType->slug.current) + '/' + coalesce(internalLink->slug_.current ,internalLink->slug.current),
                  defined(internalLink) => '/'+  coalesce(internalLink->slug_.current ,internalLink->slug.current)
                ),
  'external': select(defined(externalLink)=>true,defined(internalLink)=>false)
},
    asButton,
  },
}
,
}),
  'name':coalesce(name_da,name),
  'description':coalesce(description_da,description),
  link,
  date,
  endDate,
}
  }
  ,
  
  _type == "autoGalleryPlug" => {
   
  'items':items[]{
_key,
'image':@{
alt,
crop,
hotspot,
'url':asset->url,
"id": asset->assetId,
"type": asset->mimeType,
"aspectRatio": asset->metadata.dimensions.aspectRatio,
"lqip": asset->metadata.lqip,
'width': asset->metadata.dimensions.width,
'height': asset->metadata.dimensions.height
}
},
  }
  ,
},
      content[]{
  ...,
  
markDefs[]{
  ...,
  
_type == "link" => {
  'link': link{
   'href': select( defined(externalLink) => externalLink,
                  defined(internalLink) && defined(internalLink->pageType)  => '/'+ coalesce(internalLink->pageType->slug_.current,internalLink->pageType->slug.current) + '/' + coalesce(internalLink->slug_.current ,internalLink->slug.current),
                  defined(internalLink) => '/'+  coalesce(internalLink->slug_.current ,internalLink->slug.current)
                ),
  'external': select(defined(externalLink)=>true,defined(internalLink)=>false)
},
    asButton,
  },
}
,
  
_type == "spacer" => {
    _type,
    space
}
,
  
_type == "imageGalleryPlug" => {
  ...,
  _type,
  _key,
  'items':items[]{..., 'image': image{
alt,
crop,
hotspot,
'url':asset->url,
"id": asset->assetId,
"type": asset->mimeType,
"aspectRatio": asset->metadata.dimensions.aspectRatio,
"lqip": asset->metadata.lqip,
'width': asset->metadata.dimensions.width,
'height': asset->metadata.dimensions.height
} ,'link':link{
    
   'href': select( defined(externalLink) => externalLink,
                  defined(internalLink) && defined(internalLink->pageType)  => '/'+ coalesce(internalLink->pageType->slug_.current,internalLink->pageType->slug.current) + '/' + coalesce(internalLink->slug_.current ,internalLink->slug.current),
                  defined(internalLink) => '/'+  coalesce(internalLink->slug_.current ,internalLink->slug.current)
                ),
  'external': select(defined(externalLink)=>true,defined(internalLink)=>false)

  }  },
  rows,
  rows_mobile,
  ratio,
}
,
  
_type == "imagePlug" => {
  ...,
  'image': image{
alt,
crop,
hotspot,
'url':asset->url,
"id": asset->assetId,
"type": asset->mimeType,
"aspectRatio": asset->metadata.dimensions.aspectRatio,
"lqip": asset->metadata.lqip,
'width': asset->metadata.dimensions.width,
'height': asset->metadata.dimensions.height
},
}
,
  
  _type == "eventPlug" => {
   'items': *[_type == 'event' && references(^.includeTags[]._ref) ] | order(eventItems[0].startDate asc)[] {
  _type,
  _id,
  'tags': tags._ref,
  'content':coalesce(content_da[]{
  ...,
  
markDefs[]{
  ...,
  
_type == "link" => {
  'link': link{
   'href': select( defined(externalLink) => externalLink,
                  defined(internalLink) && defined(internalLink->pageType)  => '/'+ coalesce(internalLink->pageType->slug_.current,internalLink->pageType->slug.current) + '/' + coalesce(internalLink->slug_.current ,internalLink->slug.current),
                  defined(internalLink) => '/'+  coalesce(internalLink->slug_.current ,internalLink->slug.current)
                ),
  'external': select(defined(externalLink)=>true,defined(internalLink)=>false)
},
    asButton,
  },
}
,
},content[]{
  ...,
  
markDefs[]{
  ...,
  
_type == "link" => {
  'link': link{
   'href': select( defined(externalLink) => externalLink,
                  defined(internalLink) && defined(internalLink->pageType)  => '/'+ coalesce(internalLink->pageType->slug_.current,internalLink->pageType->slug.current) + '/' + coalesce(internalLink->slug_.current ,internalLink->slug.current),
                  defined(internalLink) => '/'+  coalesce(internalLink->slug_.current ,internalLink->slug.current)
                ),
  'external': select(defined(externalLink)=>true,defined(internalLink)=>false)
},
    asButton,
  },
}
,
}),
  'name':coalesce(name_da,name),
  'description':coalesce(description_da,description),
  link,
  date,
  endDate,
}
  }
  ,
  
  _type == "autoGalleryPlug" => {
   
  'items':items[]{
_key,
'image':@{
alt,
crop,
hotspot,
'url':asset->url,
"id": asset->assetId,
"type": asset->mimeType,
"aspectRatio": asset->metadata.dimensions.aspectRatio,
"lqip": asset->metadata.lqip,
'width': asset->metadata.dimensions.width,
'height': asset->metadata.dimensions.height
}
},
  }
  ,
}
      ),
  bgImage{
alt,
crop,
hotspot,
'url':asset->url,
"id": asset->assetId,
"type": asset->mimeType,
"aspectRatio": asset->metadata.dimensions.aspectRatio,
"lqip": asset->metadata.lqip,
'width': asset->metadata.dimensions.width,
'height': asset->metadata.dimensions.height
},
  image{
alt,
crop,
hotspot,
'url':asset->url,
"id": asset->assetId,
"type": asset->mimeType,
"aspectRatio": asset->metadata.dimensions.aspectRatio,
"lqip": asset->metadata.lqip,
'width': asset->metadata.dimensions.width,
'height': asset->metadata.dimensions.height
}
}
,
_type == "listing" => {

  hideDoneEvents,
  eventVariant,
  'personItems': personItems[]->{
...,
_id,
'avatar':avatar{
alt,
crop,
hotspot,
'url':asset->url,
"id": asset->assetId,
"type": asset->mimeType,
"aspectRatio": asset->metadata.dimensions.aspectRatio,
"lqip": asset->metadata.lqip,
'width': asset->metadata.dimensions.width,
'height': asset->metadata.dimensions.height
},
'description':coalesce(description_da,description),
 name,
'position':coalesce(position_da,position),
},
  'testimonialItems': testimonialItems[]->{
...,
_id,
'image':image{
alt,
crop,
hotspot,
'url':asset->url,
"id": asset->assetId,
"type": asset->mimeType,
"aspectRatio": asset->metadata.dimensions.aspectRatio,
"lqip": asset->metadata.lqip,
'width': asset->metadata.dimensions.width,
'height': asset->metadata.dimensions.height
},
'description':coalesce(description_da,description),
 name,
'position':coalesce(position_da,position),
'text':coalesce(text_da,text),
},
  _type,
  _key,
  contentType,
  showTitle,
  variant,
  'filterItems': select( contentType == 'event' || (contentType  == 'documentations' && !defined(documentationsIncludeTags) )  => *[_type == "tag"]{'label':coalesce(name_da,name),'value':_id},null ),
  'title':coalesce(title_da,title),
  'items': 
    select(
      type == 'custom' => customItems[]->{
 
  _id,
  'tags': tags._ref,
  'title':coalesce(title_da,title),
  'subTitle':coalesce(subTitle_da,subTitle),
  'description':coalesce(description_da,description),
  'slug':select(
    defined(pageType) && defined(pageType->slug_da.current)  => pageType->slug_da.current + '/' + coalesce(slug_da.current,slug.current),
    defined(pageType) => pageType->slug.current + '/' +  coalesce(slug_da.current,slug.current),
    coalesce(slug_da.current,slug.current)
    ),
  'featuredImage':featuredImage{
alt,
crop,
hotspot,
'url':asset->url,
"id": asset->assetId,
"type": asset->mimeType,
"aspectRatio": asset->metadata.dimensions.aspectRatio,
"lqip": asset->metadata.lqip,
'width': asset->metadata.dimensions.width,
'height': asset->metadata.dimensions.height
}
  },
      contentType == 'event' && count(eventIncludeTags) > 0 => *[ _type == 'event' && references(^.eventIncludeTags[]._ref ) ]| order(date asc)[]{
  _type,
  _id,
  'tags': tags._ref,
  'content':coalesce(content_da[]{
  ...,
  
markDefs[]{
  ...,
  
_type == "link" => {
  'link': link{
   'href': select( defined(externalLink) => externalLink,
                  defined(internalLink) && defined(internalLink->pageType)  => '/'+ coalesce(internalLink->pageType->slug_.current,internalLink->pageType->slug.current) + '/' + coalesce(internalLink->slug_.current ,internalLink->slug.current),
                  defined(internalLink) => '/'+  coalesce(internalLink->slug_.current ,internalLink->slug.current)
                ),
  'external': select(defined(externalLink)=>true,defined(internalLink)=>false)
},
    asButton,
  },
}
,
},content[]{
  ...,
  
markDefs[]{
  ...,
  
_type == "link" => {
  'link': link{
   'href': select( defined(externalLink) => externalLink,
                  defined(internalLink) && defined(internalLink->pageType)  => '/'+ coalesce(internalLink->pageType->slug_.current,internalLink->pageType->slug.current) + '/' + coalesce(internalLink->slug_.current ,internalLink->slug.current),
                  defined(internalLink) => '/'+  coalesce(internalLink->slug_.current ,internalLink->slug.current)
                ),
  'external': select(defined(externalLink)=>true,defined(internalLink)=>false)
},
    asButton,
  },
}
,
}),
  'name':coalesce(name_da,name),
  'description':coalesce(description_da,description),
  link,
  date,
  endDate,
},
      contentType == 'event' => *[ _type == 'event']| order(date asc)[]{
        
  _type,
  _id,
  'tags': tags._ref,
  'content':coalesce(content_da[]{
  ...,
  
markDefs[]{
  ...,
  
_type == "link" => {
  'link': link{
   'href': select( defined(externalLink) => externalLink,
                  defined(internalLink) && defined(internalLink->pageType)  => '/'+ coalesce(internalLink->pageType->slug_.current,internalLink->pageType->slug.current) + '/' + coalesce(internalLink->slug_.current ,internalLink->slug.current),
                  defined(internalLink) => '/'+  coalesce(internalLink->slug_.current ,internalLink->slug.current)
                ),
  'external': select(defined(externalLink)=>true,defined(internalLink)=>false)
},
    asButton,
  },
}
,
},content[]{
  ...,
  
markDefs[]{
  ...,
  
_type == "link" => {
  'link': link{
   'href': select( defined(externalLink) => externalLink,
                  defined(internalLink) && defined(internalLink->pageType)  => '/'+ coalesce(internalLink->pageType->slug_.current,internalLink->pageType->slug.current) + '/' + coalesce(internalLink->slug_.current ,internalLink->slug.current),
                  defined(internalLink) => '/'+  coalesce(internalLink->slug_.current ,internalLink->slug.current)
                ),
  'external': select(defined(externalLink)=>true,defined(internalLink)=>false)
},
    asButton,
  },
}
,
}),
  'name':coalesce(name_da,name),
  'description':coalesce(description_da,description),
  link,
  date,
  endDate,
},
      contentType  == 'documentations' && count(documentationsIncludeTags) > 0 => *[ pageType._ref == "88e611ea-581e-48c4-b63c-13e1084acf4f" && references(^.documentationsIncludeTags[]._ref ) ][]{
 
  _id,
  'tags': tags._ref,
  'title':coalesce(title_da,title),
  'subTitle':coalesce(subTitle_da,subTitle),
  'description':coalesce(description_da,description),
  'slug':select(
    defined(pageType) && defined(pageType->slug_da.current)  => pageType->slug_da.current + '/' + coalesce(slug_da.current,slug.current),
    defined(pageType) => pageType->slug.current + '/' +  coalesce(slug_da.current,slug.current),
    coalesce(slug_da.current,slug.current)
    ),
  'featuredImage':featuredImage{
alt,
crop,
hotspot,
'url':asset->url,
"id": asset->assetId,
"type": asset->mimeType,
"aspectRatio": asset->metadata.dimensions.aspectRatio,
"lqip": asset->metadata.lqip,
'width': asset->metadata.dimensions.width,
'height': asset->metadata.dimensions.height
}
  },
      contentType  == 'documentations' => *[ pageType._ref == "88e611ea-581e-48c4-b63c-13e1084acf4f" ][]{
 
  _id,
  'tags': tags._ref,
  'title':coalesce(title_da,title),
  'subTitle':coalesce(subTitle_da,subTitle),
  'description':coalesce(description_da,description),
  'slug':select(
    defined(pageType) && defined(pageType->slug_da.current)  => pageType->slug_da.current + '/' + coalesce(slug_da.current,slug.current),
    defined(pageType) => pageType->slug.current + '/' +  coalesce(slug_da.current,slug.current),
    coalesce(slug_da.current,slug.current)
    ),
  'featuredImage':featuredImage{
alt,
crop,
hotspot,
'url':asset->url,
"id": asset->assetId,
"type": asset->mimeType,
"aspectRatio": asset->metadata.dimensions.aspectRatio,
"lqip": asset->metadata.lqip,
'width': asset->metadata.dimensions.width,
'height': asset->metadata.dimensions.height
}
  },
      contentType  == 'art' => *[ pageType._ref == "3deed84f-18d4-4149-b588-ee130d7b9234" ][]{
 
  _id,
  'tags': tags._ref,
  'title':coalesce(title_da,title),
  'subTitle':coalesce(subTitle_da,subTitle),
  'description':coalesce(description_da,description),
  'slug':select(
    defined(pageType) && defined(pageType->slug_da.current)  => pageType->slug_da.current + '/' + coalesce(slug_da.current,slug.current),
    defined(pageType) => pageType->slug.current + '/' +  coalesce(slug_da.current,slug.current),
    coalesce(slug_da.current,slug.current)
    ),
  'featuredImage':featuredImage{
alt,
crop,
hotspot,
'url':asset->url,
"id": asset->assetId,
"type": asset->mimeType,
"aspectRatio": asset->metadata.dimensions.aspectRatio,
"lqip": asset->metadata.lqip,
'width': asset->metadata.dimensions.width,
'height': asset->metadata.dimensions.height
}
  },
      type == 'contentType' => *[_type == ^.contentType ][]{
 
  _id,
  'tags': tags._ref,
  'title':coalesce(title_da,title),
  'subTitle':coalesce(subTitle_da,subTitle),
  'description':coalesce(description_da,description),
  'slug':select(
    defined(pageType) && defined(pageType->slug_da.current)  => pageType->slug_da.current + '/' + coalesce(slug_da.current,slug.current),
    defined(pageType) => pageType->slug.current + '/' +  coalesce(slug_da.current,slug.current),
    coalesce(slug_da.current,slug.current)
    ),
  'featuredImage':featuredImage{
alt,
crop,
hotspot,
'url':asset->url,
"id": asset->assetId,
"type": asset->mimeType,
"aspectRatio": asset->metadata.dimensions.aspectRatio,
"lqip": asset->metadata.lqip,
'width': asset->metadata.dimensions.width,
'height': asset->metadata.dimensions.height
}
  }
      )
}
},  
'footer': {
'imprintPage': *[_id == 'siteConfig'][0].imprintPage->{ 'href': coalesce('/'+slug_da.current,'/' + slug.current), 'label':coalesce(title_da,title) },
'privacyPolicyPage': *[_id == 'siteConfig'][0].privacyPolicyPage->{ 'href': coalesce('/'+slug_da.current,'/' + slug.current), 'label':coalesce(title_da,title) },
'socialMedia': *[_id == 'siteConfig'].socialMedia[]{icon,url,_key},
'logos': *[_id == 'siteConfig'].logos[]{'image':image{
alt,
crop,
hotspot,
'url':asset->url,
"id": asset->assetId,
"type": asset->mimeType,
"aspectRatio": asset->metadata.dimensions.aspectRatio,
"lqip": asset->metadata.lqip,
'width': asset->metadata.dimensions.width,
'height': asset->metadata.dimensions.height
},'text':coalesce(text_da,text), _key},
},
'title':coalesce( title_da, title),
'homeRoute':*[_id == 'siteConfig'][0].indexPage->{ 'slug':slug.current,'slug_en':slug_en.current,'slug_da':slug_da.current },

   'navigation':*[_id == 'siteConfig'][0].mainNav[]{
    
      'label': coalesce(label_da, label),
      'link':link{
        
   'href': select( defined(externalLink) => externalLink,
                  defined(internalLink) && defined(internalLink->pageType)  => '/'+ coalesce(internalLink->pageType->slug_da.current,internalLink->pageType->slug.current) + '/' + coalesce(internalLink->slug_da.current ,internalLink->slug.current),
                  defined(internalLink) => '/'+  coalesce(internalLink->slug_da.current ,internalLink->slug.current)
                ),
  'external': select(defined(externalLink)=>true,defined(internalLink)=>false)

      } 
  ,
    'items':items[]{
      
      'label': coalesce(label_da, label),
      'link':link{
        
   'href': select( defined(externalLink) => externalLink,
                  defined(internalLink) && defined(internalLink->pageType)  => '/'+ coalesce(internalLink->pageType->slug_da.current,internalLink->pageType->slug.current) + '/' + coalesce(internalLink->slug_da.current ,internalLink->slug.current),
                  defined(internalLink) => '/'+  coalesce(internalLink->slug_da.current ,internalLink->slug.current)
                ),
  'external': select(defined(externalLink)=>true,defined(internalLink)=>false)

      } 
  ,
      'items':items[]{
      'label': coalesce(label_da, label),
      'link':link{
        
   'href': select( defined(externalLink) => externalLink,
                  defined(internalLink) && defined(internalLink->pageType)  => '/'+ coalesce(internalLink->pageType->slug_da.current,internalLink->pageType->slug.current) + '/' + coalesce(internalLink->slug_da.current ,internalLink->slug.current),
                  defined(internalLink) => '/'+  coalesce(internalLink->slug_da.current ,internalLink->slug.current)
                ),
  'external': select(defined(externalLink)=>true,defined(internalLink)=>false)

      } 
  }
    }
   }
  ,

  'langSwitchData': {
       'href': select( 
          defined(pageType) => '/'+ pageType->slug.current +'/'+  slug.current,
          !defined(pageType) => '/'+  slug.current
      
      ), 'href_da': select(
            defined(pageType) => '/'+ pageType->slug_da.current +'/'+  slug_da.current,
            !defined(pageType) => '/'+  slug_da.current
      ), 'href_en': select(
            defined(pageType) => '/'+ pageType->slug_en.current +'/'+  slug_en.current,
            !defined(pageType) => '/'+  slug_en.current
      ),
  }
  ,

'seo':{
  'canonical': select( 
    defined(pageType) => coalesce('/da/'+ pageType->slug_da.current,'/'+ pageType->slug.current ) + coalesce('/'+slug_da.current , slug.current),
    coalesce('/da/'+slug_da.current , slug.current)
    ),
  'shareGraphic':coalesce(featuredImage.asset->url, *[_id == 'siteConfig'][0].seo.shareGraphic.asset->url),
  'metaTitle':coalesce( title_da , title , *[_id == 'siteConfig'][0].seo.metaTitle),
  'metaDesc':coalesce(description_da,description,*[_id == 'siteConfig'][0].seo.metaDesc),
  'shareTitle': coalesce( title_da , title , *[_id == 'siteConfig'][0].seo.metaTitle),
  'shareDesc': coalesce(description_da,description,*[_id == 'siteConfig'][0].seo.metaDesc),
}


  }